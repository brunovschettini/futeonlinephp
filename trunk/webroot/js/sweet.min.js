var httprequest = '';
$(function() {
    /**
     * -- No more use
     *    $('.sweetInputSubmit').click(function(e) {
     *        e.stopImmediatePropagation();
     *        var $this = $(this);
     *        $($this.get(0).form).submit(function(e) {
     *            alert($this.attr('id'));
     *            e.preventDefault();
     *            $(this).sweet({'dataAction': $this.attr('id')});
     *        });
     *        return $this;
     *    });
     *    Data ajax: data-ajax="true" (Default true)
     *    @param {Event} e Não propagar
     */
    $('.sweetForm').submit(function(e) {
        e.stopImmediatePropagation();
        var $this = $(this);
        try {
            var $ajax = $this.context.ownerDocument.activeElement.attributes.getNamedItem('data-ajax').nodeValue;
        } catch (ex) {
            $ajax = 'true';
        }
        try {
            var $dataAction = $this.context.ownerDocument.activeElement.id;
        } catch (ex) {
            console.log("No action data action in this element! Err:" + ex);
            return false;
        }
        if ($ajax === 'false') {
            return false;
        }
        $(this).sweet({'dataAction': $dataAction});
        return false;
    });
    $('.sweetLoad').ready(function() {
        $(this).sweet();
    });
    $('.sweetClick').click(function(e) {
        e.preventDefault();
        $(this).sweet();
    });
    $('.sweetMouseUp').mouseup(function() {
        $(this).sweet();
    });
    $('.sweetMouseDown').mousedown(function() {
        $(this).sweet();
    });
    $('.sweetMouseMove').mousemove(function() {
        $(this).sweet();
    });
    $('.sweetKeyPress').keypress(function() {
        $(this).sweet();
    });
    $('.sweetKeyUp').keyup(function() {
        $(this).sweet();
    });
    $('.sweetKeyDown').keydown(function() {
        $(this).sweet();
    });
});

(function($) {
    /**
     * <p>SweetPHP</p>
     * <p>Script para execução de eventos diversos.</p>
     * @param {type} parameters
     * @returns {_L42.$.fn|_L42.$.fn@call;each}
     */
    $.fn.sweet = function(parameters) {
        var showErros = false;
        parameters = $.extend({
            'id': '', // id
            'name': '', // name (form name)
            'method': 'post', // method (post / get)
            'action': 'index.php', // selector
            'request': '', // class, bean, controller, processing
            'dataType': '*', // type
            'dataTable': 'false', // data grid
            'dataTypeRequest': 'json', // data type request (text, html, *, json)
            'selectorLoading': '', // selector loading show
            'dataLoadingClass': '', // selector loading class
            'dataLoadingText': '', // selector text
            'dataEvent': '', // event (click, change)
            'selector': '', // selector
            'selectorReturn': '', // selector return
            'class': '', // class
            'data': '', // data
            'isajax': 'true', // ajax
            'dataListener': '', // listener
            'dataAction': '', // action, method, page
            'updateArray': Array(), // events after request
            'dataUpdate': Array(), // events after update
            'dataComplete': Array(), // events after update
            'this': '', // this - use exclusive of the plugin
            'console': '', // this - use exclusive of the plugin
            'inputs': Array() // inputs -  use exclusive of the plugin
        }, parameters);
        var methods = {
            success: function(object) {
                if (object.dataType === '*') {
                    return;
                }
                if (object.dataType === 'html') {
                    $(object.selectorReturn).html(object.data);
                    return;
                }
                if (object.dataType === 'append') {
                    $(object.selectorReturn).append(object.data);
                    return;
                }
                var node = '';
                var $this;
                try {
                    if ($(object.selectorReturn) !== '') {
                        $this = $(object.selectorReturn);
                        node = $this.get(0).nodeName;
                    }
                } catch (err) {
                    return;
                }
                if (node === 'TABLE' && $this.data('table') !== undefined) {
                    if (object.data === undefined) {
                        return;
                    }
                    var dataEdit = $(object.selectorReturn).data('edit') ? $(object.selectorReturn).data('edit') : false;
                    var dataEmpty = $(object.selectorReturn).data('empty-message') ? $(object.selectorReturn).data('empty-message') : 'No results search!';
                    var dataRowsCount = $(object.selectorReturn).data('rows-count') ? $(object.selectorReturn).data('rows-count') : 0;
                    if (dataEdit) {
                        dataEdit = '';
                        var result;
                        try {
                            result = JSON.parse(object.data) ? JSON.parse(object.data) : '';
                        } catch (err) {
                            return;
                        }
                        if (result.length === 0) {
                            $(object.selectorReturn).append('<tbody><tr><td colspan="500">' + dataEmpty + '</td></tr></tbody>');
                            return;
                        }
                        //                    $(object.selectorReturn + ' tbody tr').each(function(i, row) {
                        //                        if (row.attr('data-row').empty()) {
                        //                            $(row).parent('td').each(function(j, cel) {
                        //                                $.each(result, function(k) {
                        //                                    alert(result[k].usuario);
                        //                                });
                        //                            });
                        //                        }
                        //                    });
                    }
                    //                if (dataRowsCount > 0) {
                    //                    $(object.selectorReturn).prepend('<tfoot><tr><td colspan="500">' + dataRowsCount + '</td></tr></tbody>');
                    //                }
                    return;
                }
                var $tagsA = new Array('SPAN', 'DIV');
                var $tagsB = new Array('INPUT');
                for (var i = 0; i < $tagsB.length; i++) {
                    if (node === $tagsB[i]) {
                        $(object.selectorReturn).attr('value', object.data);
                        break;
                    }
                }
                if (object.dataType !== 'html' && object.dataType !== '*' && object.dataType !== 'append') {
                    for (var i = 0; i < $tagsA.length; i++) {
                        if (node === $tagsA[i]) {
                            $(object.selectorReturn).html(object.data);
                        }
                    }
                }
                return object;
            },
            input: function(object, input) {
                var dataRequest;
                var $this = input;
                if ($this.data('config') !== undefined) {
                    dataRequest = eval("(" + $this.data('config') + ")");
                    $.extend(object, dataRequest);
                }
                $.extend(object, {
                    'dataAction': $this.data('action'),
                    'updateArray': $this.data('update') ? $this.data('update').split(',') : Array(),
                    'dataComplete': $this.data('complete') ? $this.data('complete') : '',
                    'dataTable': $this.data('table') ? $this.data('table') : 'false'
                });
                if ($this.data('loading') !== undefined) {
                    $.extend(object, {'dataLoading': $this.data('loading')});
                    $.extend(object, {
                        'dataLoadingClass': $this.data('loading-class') ? $this.data('loading-class') : '',
                        'dataLoadingText': $this.data('loading-text') ? $this.data('loading-text') : ''
                    });
                }
                if ($this.data('return') !== undefined) {
                    if ($this.data('return') === 'this' || $this.data('return') === undefined) {
                        $.extend(object, {'selectorReturn': $this});
                    } else {
                        $.extend(object, {'selectorReturn': $this.data('return')});
                    }
                }
                $.extend(object, {
                    'dataType': $this.data('return-type') ? $this.data('return-type') : '',
                    'dataListener': $this.data('listener') ? $this.data('listener') : '',
                    'dataTypeRequest': $this.data('type') ? $this.data('type') : 'json'
                });
                return object;
            },
            beforeSend: function(settings) {
                if (settings.selectorLoading !== '') {
                    $(settings.selectorLoading).addClass(settings.class);
                }
            },
            complete: function(settings) {
                if (settings.selectorLoading !== '') {
                    $(settings.selectorLoading).removeClass(settings.class);
                }
            },
            listener: function(settings) {
                if (settings) {
                    $.extend(parameters, eval("(" + settings + ")"));
                }
                var ajaxsettings = {
                    'type': parameters.method,
                    'url': httprequest + 'index.php',
                    'cache': 'false',
                    'dataType': parameters.dataTypeRequest
                };
                var $dataForm = eval("(" + settings + ")");
                if (parameters.dataTypeRequest === 'json') {
                    $dataForm = JSON.stringify($dataForm);
                }
                $.extend(ajaxsettings, parameters);
                $.ajaxSetup(ajaxsettings);
                $.ajax({data: $dataForm});
            },
            empty: function() {
                try {
                    return jQuery(this).length > 0;
                } catch (err) {
                    return false;
                }
            }
        };

        // VARIÁVEIS JSON

        var objectjson = {
            'redirect': '' // redirect
        };



        return this.each(function() {
            var $this = $(this);
            var nodeName = $this.get(0).nodeName;
            var isForm = false;
            if (nodeName === 'FORM') {
                if ($this.attr('name') === '') {
                    return;
                }
                isForm = true;
                $.extend(parameters, {'name': $this.attr('name'), 'method': $this.attr('method') ? $this.attr('method') : 'post', 'action': $this.attr('action') ? $this.attr('action') : 'index.php'});
                $.extend(parameters, {'id': parameters.name.toLowerCase(), 'request': parameters.name});
                $.extend(parameters, {'inputs': $('#' + parameters.id + ' :input')});
                parameters.inputs.each(function() {
                    if ($(this).attr('id') === parameters.dataAction) {
                        $.extend(parameters, methods.input(parameters, $(this)));
                    }
                });
                if (parameters.dataAction === undefined && parameters.dataAction === '') {
                    return;
                }
            } else {
                $.extend(parameters, methods.input(parameters, $(this)));
            }
            var ajaxsettings = {
                'type': parameters.method,
                'url': httprequest + parameters.action,
                'cache': 'false',
                'dataType': parameters.dataType
            };
//            var $controller = {
//                'request': parameters.request,
//                'action': parameters.dataAction
//            };

            if (parameters.dataListener !== '') {
                methods.listener(parameters.dataListener);
            }
            if (isForm) {
                var $dataForm = $this.serializeJSON();
                $.extend($dataForm, {'action': parameters.dataAction});
                if (parameters.dataTypeRequest === 'json') {
                    $dataForm = {'data': JSON.stringify($dataForm)};
                }
            } else {
                $dataForm = $.param({'request': parameters.config});
            }
            $.extend(ajaxsettings, parameters);
            $.ajaxSetup(ajaxsettings);
            $.ajax({
                data: $dataForm,
                beforeSend: function() {
                    methods.beforeSend(parameters);
                },
                success: function(data) {
                    try {
                        var dataJSON = JSON.parse(data) ? JSON.parse(data) : 'null';
                        localStorage.setItem('data', data);
                    } catch (err) {
                        localStorage.setItem('data', data);
                        var dataJSON = null;
                    }
                    $.extend(objectjson, dataJSON);
                    if (objectjson !== null) {
                        if (objectjson.disabled === true) {
                            $("input").prop("disabled", true);
                        }
                        if (objectjson.redirect !== '') {
                            if (objectjson.redirect === 'this') {
                                objectjson.redirect = '';
                            }
                            if (objectjson.time > 0) {
                                setTimeout(function() {
                                    window.location = objectjson.redirect;
                                }, objectjson.time);
                            } else {
                                window.location = objectjson.redirect;
                            }
                        }
                    }
                    if (parameters.dataTypeRequest === parameters.dataType) {
                        $.extend(parameters, methods.success({'selectorReturn': parameters.selectorReturn, 'dataType': parameters.dataType, 'data': data, 'this': $this}));
                    } else {
                        $.extend(parameters, methods.success({'selectorReturn': parameters.selectorReturn, 'dataType': parameters.dataTypeRequest, 'data': data, 'this': $this}));
                    }
                },
                complete: function() {
                    if (parameters.updateArray.length > 0) {
                        for (var i = 0; i < parameters.updateArray.length; i++) {
                            var f = $.trim('#' + parameters.updateArray[i]);
                            var fThis = $(f);
                            if (fThis.get(0).nodeName === 'SELECT') {
                                fThis.change();
                            } else if (fThis.get(0).nodeName === 'FORM') {
                                fThis.populate(objectjson);
                            } else {
                                fThis.click();
                            }
                        }
                    }
                    if (parameters.dataComplete !== '') {
                        /**
                         * Function name
                         * Ex. data-complete="test();test('b')"
                         * Ex. data-complete="{'arrayFunction':[{'functionName':'test','params':[]}]}" - Use aspas simples
                         */
                        //var obj = JSON.stringify($.param('{"arrayFunction":"beleza"}"));
                        //var dataArrayFx = JSON.stringify(eval("(" + parameters.dataComplete + ")"));
                        try {
                            var arrayFx = $.parseJSON(parameters.dataComplete);
                            var t = false;
                            if (dataArrayFx.arrayFunction === 'arrayFunction') {
                                var arrayFx = dataArrayFx.arrayFunction;
                            } else {
                                var arrayFx = $this.data('update') ? $this.data('update').split(',') : Array();
                            }
                            for (var i = 0; i < arrayFx.length; i++) {
                                if (arrayFx[i].params !== null || typeof arrayFx[i].params !== 'undefined') {
                                    if (typeof arrayFx.length === 'function') {
                                    } else if (typeof JSON.stringify(eval("(" + arrayFx.length + ")")) === 'object') {
                                        var fxn = arrayFx[i].functionName;
                                        var fxp = arrayFx[i].functionParam;
                                        var fn = window[fxn];
                                        fn(fxp);
                                    }
                                }
                            }
                        } catch (e) {
                            try {
                                var arrayFx = parameters.dataComplete.split(';');
                                for (var i = 0; i < arrayFx.length; i++) {
                                    var fx = $.trim(arrayFx[i]);
                                    eval("(" + fx + ")");
                                }
                            } catch (e) {
                                console.log(e);
                            }
                            return false;
                        }
                    }
                    methods.complete(parameters);
                },
                statusCode: {
                    404: function() {
                        //alert("page not found, required index.php");
                    }
                }
            }).done(function() {
                if (showErros) {
                    alert(console.error);
                }
            });
//            input.bind('sweet',keypressEvent);
//            input.bind('sweet',keydownEvent);
//            input.bind('sweet',blurEvent);
//            input.bind('sweet',focusEvent);        
            function preventDefault(e) {
                if (e.preventDefault) { //standard browsers
                    e.preventDefault();
                } else { // internet explorer
                    e.returnValue = false;
                }
            }
        });
        return this;
    };

})(jQuery);

$('.sweetForm').ready(function() {
    $('.sweetForm').each(function() {
        var name = $(this).attr('name');
        var id = $(this).attr('id') ? $(this).attr('id') : name.toLowerCase();
        var enctype = $(this).attr('enctype') ? $(this).attr('enctype') : 'application/x-www-form-urlencoded';
        var method = $(this).attr('method') ? $(this).attr('method') : 'post';
        $(this).attr({'data-action': name, 'data-id': name.toLowerCase(), 'id': id, 'action': 'index.php', 'method': method, 'enctype': enctype});
        var inputsButton = $('#' + id + ' :input[type="submit"]');
        var values = {};
        var idNumber = 1;
        inputsButton.each(function() {
            if ($(this).attr('id') === undefined) {
                values[this.name] = $(this).val();
                if (this.name === 'undefined') {
                    $(this).attr('id', id + ':inputsubmit:' + idNumber);
                } else {
                    $(this).attr('id', id + ':' + values[this.name]);
                }
            }
            idNumber++;
        });
        var inputsText = $('#' + id + ' :input[type="text"]');
        $(this).append('<input type="hidden" name="request" value="' + name + '" />').after("</form>");
        inputsText.each(function() {
            if ($(this).attr('id') === undefined) {
                $(this).attr('id', id + ':inputtext:' + idNumber);
            }
            idNumber++;
        });

    });
    return this;
});
$('.sweetDataTable').ready(function() {
    $('.sweetDataTable').each(function() {
        var dataEmpty = $(this).data('empty-message') ? $(this).data('empty-message') : 'No results search!';
        //$(this).append('<tbody><tr><td colspan="500">' + dataEmpty + '</td></tr></tbody>');
        var textHeader = $(this).data('table-header-text') ? $(this).data('table-header-text') : '';
        if (textHeader !== '') {
            $(this).prepend('<thead><tr><th colspan="500" style="text-align: center;">' + textHeader + '</th></tr></thead>');
        }
        var textFooter = $(this).data('table-header-text') ? $(this).data('table-footer-text') : '';
        if (textFooter !== '') {
            $(this).append('<tfoot><tr><th colspan="500" style="text-align: center;">' + textFooter + '</th></tr></tfoot>');
        }
        var dataConfig = $(this).data('config') ? $(this).data('config') : '';
        //eval("(" + dataConfig + ")");
        $(this).sweet(dataConfig);
    });
    return this;
});
//  var arrayFunction = [{ pFunction : eval("(test.prototype.constructor )")  ,params:[] }]; 
//   $this.data("complete", {arrayFunction : arrayFunction});

//callback = [{fxName: eval("('" + arrayFx[i].pFunction + ".prototype.constructor')"), params: []}];
// var callback = [{pFunction: eval("(" + arrayFx[i].pFunction + ".prototype.constructor)")}];

//var arrayFunction = [{ pFunction : eval("(bilau.prototype.constructor )")  ,params:[] }]; 

// if(arrayFx[i].params == null || arrayFx[i].params.lenght == 0)

//}else{
//callback();
//}
//ScriptManager.RegisterStartupScript(this, GetType(), "ServerControlScript", v, true);


/**
 * Integrei o Serialize JSON para enviar os dados posts e converter para json;
 */

/*!
 *  SerializeJSON jQuery plugin.
 *  https://github.com/marioizquierdo/jquery.serializeJSON
 *  version 2.0.0 (May, 2014)
 *
 *  Copyright (c) 2014 Mario Izquierdo
 *  Dual licensed under the MIT (http://www.opensource.org/licenses/mit-license.php)
 *  and GPL (http://www.opensource.org/licenses/gpl-license.php) licenses.
 *  https://github.com/marioizquierdo/jquery.serializeJSON/blob/master/jquery.serializejson.min.js
 */
(function(a) {
    a.fn.serializeJSON = function(c) {
        var d, b, g, i, h, e;
        h = a.serializeJSON;
        b = this.serializeArray();
        e = h.optsWithDefaults();
        d = {};
        a.each(b, function(j, f) {
            g = h.splitInputNameIntoKeysArray(f.name);
            i = h.parseValue(f.value, e);
            h.deepSet(d, g, i, e)
        });
        return d
    };
    a.serializeJSON = {defaultOptions: {parseNumbers: false, parseBooleans: false, parseNulls: false, parseAll: false, useIntKeysAsArrayIndex: false}, optsWithDefaults: function(c) {
            var d, b;
            if (c == null) {
                c = {}
            }
            d = a.serializeJSON;
            b = d.optWithDefaults("parseAll", c);
            return{parseNumbers: b || d.optWithDefaults("parseNumbers", c), parseBooleans: b || d.optWithDefaults("parseBooleans", c), parseNulls: b || d.optWithDefaults("parseNulls", c), useIntKeysAsArrayIndex: d.optWithDefaults("useIntKeysAsArrayIndex", c)}
        }, optWithDefaults: function(c, b) {
            return(b[c] !== false) && (b[c] || a.serializeJSON.defaultOptions[c])
        }, parseValue: function(e, b) {
            var d, c;
            c = a.serializeJSON;
            if (b.parseNumbers && !isNaN(e)) {
                return Number(e)
            }
            if (b.parseBooleans && (e === "true" || e === "false")) {
                return e === "true"
            }
            if (b.parseNulls && e == "null") {
                return null
            }
            return e
        }, isObject: function(b) {
            return b === Object(b)
        }, isUndefined: function(b) {
            return b === void 0
        }, isValidArrayIndex: function(b) {
            return/^[0-9]+$/.test(String(b))
        }, splitInputNameIntoKeysArray: function(b) {
            var d, c, e;
            e = a.serializeJSON;
            if (e.isUndefined(b)) {
                throw new Error("ArgumentError: param 'name' expected to be a string, found undefined")
            }
            d = a.map(b.split("["), function(f) {
                c = f[f.length - 1];
                return c === "]" ? f.substring(0, f.length - 1) : f
            });
            if (d[0] === "") {
                d.shift()
            }
            return d
        }, deepSet: function(c, l, j, b) {
            var k, h, g, i, d, e;
            if (b == null) {
                b = {}
            }
            e = a.serializeJSON;
            if (e.isUndefined(c)) {
                throw new Error("ArgumentError: param 'o' expected to be an object or array, found undefined")
            }
            if (!l || l.length === 0) {
                throw new Error("ArgumentError: param 'keys' expected to be an array with least one element")
            }
            k = l[0];
            if (l.length === 1) {
                if (k === "") {
                    c.push(j)
                } else {
                    c[k] = j
                }
            } else {
                h = l[1];
                if (k === "") {
                    i = c.length - 1;
                    d = c[i];
                    if (e.isObject(d) && (e.isUndefined(d[h]) || l.length > 2)) {
                        k = i
                    } else {
                        k = i + 1
                    }
                }
                if (e.isUndefined(c[k])) {
                    if (h === "") {
                        c[k] = []
                    } else {
                        if (b.useIntKeysAsArrayIndex && e.isValidArrayIndex(h)) {
                            c[k] = []
                        } else {
                            c[k] = {}
                        }
                    }
                }
                g = l.slice(1);
                e.deepSet(c[k], g, j, b)
            }
        }}
}(window.jQuery || window.Zepto || window.$));

/**
 * 
 * @param {type} g
 * @param {type} h
 * @returns {jQuery.fn}
 * http://www.keyframesandcode.com/resources/javascript/jQuery/populate/jquery.populate.pack.js
 */
jQuery.fn.populate = function(obj, options) {


    // ------------------------------------------------------------------------------------------
    // JSON conversion function

    // convert 
    function parseJSON(obj, path)
    {
        // prepare
        path = path || '';

        // iteration (objects / arrays)
        if (obj == undefined)
        {
            // do nothing
        }
        else if (obj.constructor == Object)
        {
            for (var prop in obj)
            {
                var name = path + (path == '' ? prop : '[' + prop + ']');
                parseJSON(obj[prop], name);
            }
        }

        else if (obj.constructor == Array)
        {
            for (var i = 0; i < obj.length; i++)
            {
                var index = options.useIndices ? i : '';
                index = options.phpNaming ? '[' + index + ']' : index;
                var name = path + index;
                parseJSON(obj[i], name);
            }
        }

        // assignment (values)
        else
        {
            // if the element name hasn't yet been defined, create it as a single value
            if (arr[path] == undefined)
            {
                arr[path] = obj;
            }

            // if the element name HAS been defined, but it's a single value, convert to an array and add the new value
            else if (arr[path].constructor != Array)
            {
                arr[path] = [arr[path], obj];
            }

            // if the element name HAS been defined, and is already an array, push the single value on the end of the stack
            else
            {
                arr[path].push(obj);
            }
        }

    }
    ;


    // ------------------------------------------------------------------------------------------
    // population functions

    function debug(str)
    {
        if (window.console && console.log)
        {
            console.log(str);
        }
    }

    function getElementName(name)
    {
        if (!options.phpNaming)
        {
            name = name.replace(/\[\]$/, '');
        }
        return name;
    }

    function populateElement(parentElement, name, value)
    {
        var selector = options.identifier == 'id' ? '#' + name : '[' + options.identifier + '="' + name + '"]';
        var element = jQuery(selector, parentElement);
        value = value.toString();
        value = value == 'null' ? '' : value;
        element.html(value);
    }

    function populateFormElement(form, name, value)
    {

        // check that the named element exists in the form
        var name = getElementName(name); // handle non-php naming
        var element = form[name];

        // if the form element doesn't exist, check if there is a tag with that id
        if (element == undefined)
        {
            // look for the element
            element = jQuery('#' + name, form);
            if (element)
            {
                element.html(value);
                return true;
            }

            // nope, so exit
            if (options.debug)
            {
                debug('No such element as ' + name);
            }
            return false;
        }

        // debug options				
        if (options.debug)
        {
            _populate.elements.push(element);
        }

        // now, place any single elements in an array.
        // this is so that the next bit of code (a loop) can treat them the 
        // same as any array-elements passed, ie radiobutton or checkox arrays,
        // and the code will just work

        elements = element.type == undefined && element.length ? element : [element];


        // populate the element correctly

        for (var e = 0; e < elements.length; e++)
        {

            // grab the element
            var element = elements[e];

            // skip undefined elements or function objects (IE only)
            if (!element || typeof element == 'undefined' || typeof element == 'function')
            {
                continue;
            }

            // anything else, process
            switch (element.type || element.tagName)
            {

                case 'radio':
                    // use the single value to check the radio button
                    element.checked = (element.value != '' && value.toString() == element.value);

                case 'checkbox':
                    // depends on the value.
                    // if it's an array, perform a sub loop
                    // if it's a value, just do the check

                    var values = value.constructor == Array ? value : [value];
                    for (var j = 0; j < values.length; j++)
                    {
                        element.checked |= element.value == values[j];
                    }

                    //element.checked = (element.value != '' && value.toString().toLowerCase() == element.value.toLowerCase());
                    break;

                case 'select-multiple':
                    var values = value.constructor == Array ? value : [value];
                    for (var i = 0; i < element.options.length; i++)
                    {
                        for (var j = 0; j < values.length; j++)
                        {
                            element.options[i].selected |= element.options[i].value == values[j];
                        }
                    }
                    break;

                case 'select':
                case 'select-one':
                    element.value = value.toString() || value;
                    break;

                case 'text':
                case 'button':
                case 'textarea':
                case 'submit':
                default:
                    value = value == null ? '' : value;
                    element.value = value;

            }

        }

    }



    // ------------------------------------------------------------------------------------------
    // options & setup

    // exit if no data object supplied
    if (obj === undefined)
    {
        return this;
    }
    ;

    // options
    var options = jQuery.extend
            (
                    {
                        phpNaming: true,
                        phpIndices: false,
                        resetForm: true,
                        identifier: 'id',
                        debug: false
                    },
            options
                    );

    if (options.phpIndices)
    {
        options.phpNaming = true;
    }

    // ------------------------------------------------------------------------------------------
    // convert hierarchical JSON to flat array

    var arr = [];
    parseJSON(obj);

    if (options.debug)
    {
        _populate =
                {
                    arr: arr,
                    obj: obj,
                    elements: []
                }
    }

    // ------------------------------------------------------------------------------------------
    // main process function

    this.each
            (
                    function()
                    {

                        // variables
                        var tagName = this.tagName.toLowerCase();
                        var method = tagName == 'form' ? populateFormElement : populateElement;

                        // reset form?
                        if (tagName == 'form' && options.resetForm)
                        {
                            this.reset();
                        }

                        // update elements
                        for (var i in arr)
                        {
                            method(this, i, arr[i]);
                        }
                    }

            );

    return this;
};